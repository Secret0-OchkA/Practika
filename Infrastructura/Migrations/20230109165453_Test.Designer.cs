// <auto-generated />
using System;
using Infrastructura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructura.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230109165453_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Domain.Blood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("barcode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("bloods");
                });

            modelBuilder.Entity("Domain.BloodService", b =>
                {
                    b.Property<int>("BloodId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("accepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("analyzer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("finished")
                        .HasColumnType("REAL");

                    b.Property<double>("result")
                        .HasColumnType("REAL");

                    b.Property<int>("serviceCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BloodId");

                    b.HasIndex("serviceCode");

                    b.HasIndex("userId");

                    b.ToTable("bloodServices");
                });

            modelBuilder.Entity("Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SocialSecNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SocialSecType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ein")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("guid")
                        .HasColumnType("TEXT");

                    b.Property<int>("passportN")
                        .HasColumnType("INTEGER");

                    b.Property<int>("passportS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ua")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Service");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("lastenter")
                        .HasColumnType("TEXT");

                    b.Property<string>("services")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Blood", b =>
                {
                    b.HasOne("Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.BloodService", b =>
                {
                    b.HasOne("Domain.Blood", "Blood")
                        .WithMany()
                        .HasForeignKey("BloodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Service", "service")
                        .WithMany()
                        .HasForeignKey("serviceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blood");

                    b.Navigation("service");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Patient", b =>
                {
                    b.OwnsOne("Domain.Insurance", "Company", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Bik")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Inn")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("PaymentAccount")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("Domain.Identity", "user", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Ip")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("login")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("password")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.OwnsOne("Domain.Identity", "identity", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Ip")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("login")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("password")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("identity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
